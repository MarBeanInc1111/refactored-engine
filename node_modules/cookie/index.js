/**
 * Set a cookie with the given name, value, and options.
 *
 * @param {string} name - The name of the cookie.
 * @param {string} value - The value of the cookie.
 * @param {object} [options] - Optional settings for the cookie.
 * @param {number} [options.days=1] - The number of days until the cookie expires.
 * @param {string} [options.path='/'] - The path for the cookie.
 * @param {string} [options.domain] - The domain for the cookie.
 * @param {boolean} [options.secure=false] - Whether the cookie should only be sent over HTTPS.
 * @param {boolean} [options.sameSite='lax'] - The `sameSite` attribute for the cookie. Can be 'lax', 'strict', or false.
 */
function setCookie(name, value, options = {}) {
  const {
    days = 1,
    path = '/',
    domain,
    secure = false,
    sameSite = 'lax'
  } = options;

  const expires = days ? new Date(Date.now() + days * 86400000).toUTCString() : '';

  document.cookie = `${name}=${value}; expires=${expires}; path=${path}${domain ? `; domain=${domain}` : ''}${secure ? '; secure' : ''}${sameSite !== 'lax' ? `; sameSite=${sameSite}` : ''}`;
}

/**
 * Get the value of the cookie with the given name.
 *
 * @param {string} name - The name of the cookie.
 * @returns {string|undefined} The value of the cookie, or undefined if it doesn't exist.
 */
function getCookie(name) {
  const cookies = document.cookie.split(';');

  for (const cookie of cookies) {
    const [cookieName, cookieValue] = cookie.trim().split('=');

    if (cookieName === name) {
      return cookieValue;
    }
  }

  return undefined;
