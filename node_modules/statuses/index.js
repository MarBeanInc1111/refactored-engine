/*!
 * statuses
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * @private
 */

const codes = require('./codes.json')

/**
 * Module exports.
 * @public
 */

const status = {
  // status code to message map
  STATUS_CODES: codes,

  // array of status codes
  codes: populateStatusesMap(codes),

  // status codes for redirects
  redirect: {
    300: true,
    301: true,
    302: true,
    303: true,
    305: true,
    307: true,
    308: true
  },

  // status codes for empty bodies
  empty: {
    204: true,
    205: true,
    304: true
  },

  // status codes for when you should retry the request
  retry: {
    502: true,
    503: true,
    504: true
  }
}

/**
 * Populate the statuses map for given codes.
 * @private
 * @param {Object} codes - an object containing status codes and messages
 * @returns {Array} - an array of status codes
 */
function populateStatusesMap (codes) {
  const statusCodes = []

  Object.keys(codes).forEach((code) => {
    const message = codes[code]
    const status = Number(code)

    // Populate properties
    statusCodes[status] = message
    statusCodes[message] = status
    statusCodes[message.toLowerCase()] = status

    // Add to array
    statusCodes.push(status)
  })

  return statusCodes
}

/**
 * Get the status code.
 *
 * Given a number, this will throw if it is not a known status
 * code, otherwise the code will be returned. Given a string,
 * the string will be parsed for a number and return the code
 * if valid, otherwise will lookup the code assuming this is
 * the status message.
 *
 * @param {string|number} code - a status code or message
 * @returns {number} - the status code
 * @public
 */
function getStatusCode (code) {
  if (typeof code === 'number') {
    if (!status[code]) {
      throw new Error(`invalid status code: ${code}`)
    }
    return code
  }

  if (typeof code !== 'string') {
    throw new TypeError('code must be a number or string')
  }

  // '403'
  const n = parseInt(code, 10)
  if (!isNaN(n)) {
    if (!status[n]) {
      throw new Error(`invalid status code: ${n}`)
    }
    return n
  }

  n = status[code.toLowerCase()]
  if (typeof n !== 'number') {
    throw new Error(`invalid status message: "${code}"`)
