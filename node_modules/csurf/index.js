'use strict'

const Cookie = require('cookie')
const createError = require('http-errors')
const sign = require('cookie-signature').sign
const Tokens = require('csrf')

const defaultValue = (req) => {
  const queryToken = req.query && req.query._csrf
  const headerTokens = [req.headers['csrf-token'], req.headers['xsrf-token'], req.headers['x-csrf-token'], req.headers['x-xsrf-token']]
  const headerToken = headerTokens.find(token => token)
  const bodyToken = req.body && req.body._csrf

  return queryToken || headerToken || bodyToken
}

const getCookieOptions = (options) => {
  const opts = Object.create(null)

  opts.key = '_csrf'
  opts.path = '/'

  if (options && typeof options === 'object') {
    Object.keys(options).forEach(prop => {
      const val = options[prop]

      if (val !== undefined) {
        opts[prop] = val
      }
    })
  }

  return opts
}

const getIgnoredMethods = (methods) => {
  const obj = Object.create(null)

  methods.forEach(method => {
    obj[method.toUpperCase()] = true
  })

  return obj
}

const getSecret = (req, sessionKey, cookie) => {
  const bag = getSecretBag(req, sessionKey, cookie)
  const key = cookie ? 'signedCookies' : 'csrfSecret'

  return bag && bag[key]
}

const getSecretBag = (req, sessionKey, cookie) => {
  return cookie
    ? req[cookie.signed ? 'signedCookies' : 'cookies']
    : req[sessionKey]
}

const setCookie = (res, name, val, options) => {
  const data = Cookie.serialize(name, val, options)

  const prev = res.getHeader('set-cookie') || []
  const header = Array.isArray(prev) ? prev.concat(data) : [prev, data]

  res.setHeader('set-cookie', header)
}

const setSecret = (req, res, sessionKey, val, cookie) => {
  if (cookie) {
    let value = val

    if (cookie.signed) {
      value = 's:' + sign(val, req.secret)
    }

    setCookie(res, cookie.key, value, cookie)
  } else {
    req[sessionKey].csrfSecret = val
  }
}

const verifyConfiguration = (req, sessionKey, cookie) => {
  const bag = getSecretBag(req, sessionKey, cookie)

  if (!bag) {
    return false
  }

  if (cookie && cookie.signed && !req.secret) {
    return false
  }

  return true
}

const csurf = (options) => {
  if (!Cookie) {
    throw new Error('Cookie dependency is missing')
  }

  if (!createError) {
    throw new Error('CreateError dependency is missing')
  }

  if (!sign) {
    throw new Error('Sign dependency is missing')
  }

  if (!Tokens) {
    throw new Error('Tokens dependency is missing')
  }

  const opts = options || {}
  const cookieOptions = getCookieOptions(opts.cookie)
  const sessionKey = opts.sessionKey || 'session'
  const valueGetter = opts.value || defaultValue
  const tokensRepo = new Tokens(opts)
  const ignoreMethods = getIgnoredMethods(opts.ignoreMethods || ['GET', 'HEAD', 'OPTIONS'])

  return (req, res, next) => {
    if (!verifyConfiguration(req, sessionKey, cookieOptions)) {
      return next(new Error('misconfigured csrf'))
    }

    const secret = getSecret(req, sessionKey, cookieOptions)
    let token

    req.csrfToken = () => {
      const currentSecret = !cookieOptions
        ? getSecret(req, sessionKey, cookieOptions)
        : secret

      if (token && currentSecret === secret) {
        return token
      }

      token = tokensRepo.create(currentSecret)

      if (!cookieOptions) {
        setSecret(req, res, sessionKey, token, cookieOptions)
      }

      return token
    }

    if (!ignoreMethod[req.method]) {
      token = valueGetter(req)

      if (!token) {
        return next(createError(403, 'Forbidden'))
      }

      tokensRepo.verify(secret, token, (err) => {
        if (err) {
          return next(createError(403, 'Forbidden'))
        }

        next()
      })
    } else {
      next()
    }
  }
}

module.exports = csurf
