# Import necessary libraries and modules
import os
import logging

# Configure logging module to log messages to a file
logging.basicConfig(filename='example.log', level=logging.INFO)

# Define a function to perform a specific task
def process_data(data):
    """
    This function processes the input data and returns the result.

    :param data: The input data to be processed
    :type data: list
    :return: The processed data
    :rtype: list
    """
    # Initialize an empty list to store the processed data
    processed_data = []

    # Loop through each item in the input data
    for item in data:
        # Perform some operations on the item
        result = item * 2

        # Add the processed item to the list
        processed_data.append(result)

    # Log the processed data
    logging.info(f"Processed data: {processed_data}")

    # Return the processed data
    return processed_data

# Define a function to handle exceptions and errors
def handle_exception(exc_type, exc_value, exc_traceback):
    """
    This function handles exceptions and errors by logging them and providing meaningful error messages.

    :param exc_type: The type of the exception
    :type exc_type: type
    :param exc_value: The value of the exception
    :type exc_value: object
    :param exc_traceback: The traceback object
    :type exc_traceback: traceback
    """
    # Log the exception, value, and traceback
    logging.error(f"Unhandled exception: {exc_type}, {exc_value}, {exc_traceback}")

    # Print a meaningful error message
    print(f"An unexpected error occurred: {exc_type}")

# Set the custom exception handler
sys.excepthook = handle_exception

# Define some input data
input_data = [1, 2, 3, 4
